'''
Servicio mejorado para interactuar con Gemini AI.
Maneja comparaciones de productos, consultas tecnol√≥gicas y recomendaciones avanzadas.
'''
import logging
from typing import List, Dict, Any, Optional
import google.generativeai as genai

logger = logging.getLogger(__name__)

class EnhancedLLMService:
    """
    Servicio mejorado para interactuar con Gemini AI.
    Maneja comparaciones de productos y consultas tecnol√≥gicas avanzadas.
    """
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        if not api_key:
            logger.warning("EnhancedLLMService inicializado sin API key. Funcionalidad limitada.")
            self.model = None
        else:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                logger.info("EnhancedLLMService inicializado correctamente con Gemini AI")
            except Exception as e:
                logger.error(f"Error inicializando Gemini AI: {e}")
                self.model = None

    def generate_comparison_response(
        self,
        item1_name: str,
        item2_name: str,
        attributes: List[str],
        item1_data: Optional[Dict[str, Any]] = None,
        item2_data: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Genera una comparaci√≥n detallada usando Gemini AI.
        """
        logger.info(f"LLM Comparaci√≥n: '{item1_name}' vs '{item2_name}' en atributos: {attributes}")
        
        if not self.model:
            return self._fallback_comparison_response(item1_name, item2_name, attributes)
        
        try:
            prompt = self._build_comparison_prompt(item1_name, item2_name, attributes, item1_data, item2_data)
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error en comparaci√≥n LLM: {e}")
            return self._fallback_comparison_response(item1_name, item2_name, attributes)
    
    def _build_comparison_prompt(self, item1_name: str, item2_name: str, attributes: List[str], 
                                item1_data: Optional[Dict[str, Any]], item2_data: Optional[Dict[str, Any]]) -> str:
        """Construir prompt especializado para comparaci√≥n de productos tecnol√≥gicos"""
        
        prompt = f"""
Eres un experto consultor en tecnolog√≠a de GRUPO INFOTEC, empresa l√≠der en equipos tecnol√≥gicos en Per√∫.

TAREA: Compara detalladamente '{item1_name}' con '{item2_name}' para ayudar a un cliente a tomar la mejor decisi√≥n.

ASPECTOS A COMPARAR:
{', '.join(attributes) if attributes and 'caracteristicas' not in attributes else 'Todas las caracter√≠sticas relevantes'}

INFORMACI√ìN DISPONIBLE:
"""
        
        if item1_data:
            prompt += f"\nüìä DATOS DE {item1_name.upper()}:\n"
            for key, value in item1_data.items():
                if value and value != "N/A":
                    prompt += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        if item2_data:
            prompt += f"\nüìä DATOS DE {item2_name.upper()}:\n"
            for key, value in item2_data.items():
                if value and value != "N/A":
                    prompt += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        prompt += f"""

INSTRUCCIONES:
1. Proporciona una comparaci√≥n clara y estructurada
2. Destaca las ventajas y desventajas de cada producto
3. Considera factores como rendimiento, precio, calidad-precio
4. Usa un tono profesional pero amigable
5. Incluye emojis moderadamente para mejor legibilidad
6. Termina con una recomendaci√≥n seg√∫n diferentes tipos de usuario
7. M√°ximo 300 palabras
8. Si falta informaci√≥n espec√≠fica, basa la comparaci√≥n en conocimiento general de estos productos

Formato de respuesta:
üîç **Comparaci√≥n: {item1_name} vs {item2_name}**

[Comparaci√≥n detallada aqu√≠]

üí° **Recomendaci√≥n:**
[Sugerencia seg√∫n tipo de usuario]
"""
        
        return prompt
    
    def _fallback_comparison_response(self, item1_name: str, item2_name: str, attributes: List[str]) -> str:
        """Respuesta de respaldo cuando no est√° disponible el LLM"""
        return f"""üîç **Comparaci√≥n: {item1_name} vs {item2_name}**

Lo siento, en este momento tengo limitaciones para realizar una comparaci√≥n detallada con IA. 

üìã **Lo que puedo hacer:**
‚Ä¢ Buscar especificaciones individuales de cada producto
‚Ä¢ Mostrar precios y disponibilidad actual
‚Ä¢ Conectarte con un asesor especializado

üí° **Te sugiero:**
1. Consultar las especificaciones de cada producto por separado
2. Contactar a nuestro equipo de ventas para una asesor√≠a personalizada
3. Visitar nuestra tienda para ver los productos en persona

¬øTe gustar√≠a que busque informaci√≥n espec√≠fica de alguno de estos productos?"""

    def recommend_top_products(
        self,
        candidate_products: List[Dict[str, Any]],
        user_query: str,
        category: Optional[str] = None,
        use_case: Optional[str] = None,
        count: int = 3
    ) -> str:
        """
        Recomienda los mejores productos usando IA avanzada.
        """
        logger.info(f"LLM Recomendaci√≥n: Top {count} productos para query: '{user_query}'")

        if not candidate_products:
            return "Lo siento, no tengo productos disponibles para recomendar en este momento."

        if not self.model:
            return self._fallback_recommendation_response(candidate_products, user_query, count)

        try:
            prompt = self._build_recommendation_prompt(candidate_products, user_query, category, use_case, count)
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error en recomendaci√≥n LLM: {e}")
            return self._fallback_recommendation_response(candidate_products, user_query, count)

    def _build_recommendation_prompt(self, candidate_products: List[Dict[str, Any]], user_query: str, 
                                   category: Optional[str], use_case: Optional[str], count: int) -> str:
        """Construir prompt para recomendaciones inteligentes"""
        
        prompt = f"""
Eres un consultor experto en tecnolog√≠a de GRUPO INFOTEC, empresa l√≠der en Per√∫ con +15 a√±os de experiencia.

TAREA: Analiza los siguientes productos y recomienda los {count} mejores seg√∫n la consulta del cliente.

CONSULTA DEL CLIENTE: "{user_query}"
"""
        
        if category:
            prompt += f"CATEGOR√çA DE INTER√âS: {category}\n"
        if use_case:
            prompt += f"USO PRINCIPAL: {use_case}\n"
        
        prompt += "\nPRODUCTOS DISPONIBLES:\n"
        
        for i, prod_data in enumerate(candidate_products[:10]):
            prompt += f"\n{i+1}. **{prod_data.get('name', 'Producto')}**\n"
            prompt += f"   ‚Ä¢ Precio: S/ {prod_data.get('price', 'Consultar')}\n"
            if prod_data.get('description'):
                prompt += f"   ‚Ä¢ Descripci√≥n: {prod_data.get('description', '')[:100]}...\n"
            if prod_data.get('specifications'):
                specs = prod_data.get('specifications', {})
                if isinstance(specs, dict):
                    for key, value in list(specs.items())[:3]:  # Primeras 3 specs
                        prompt += f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        prompt += f"""

INSTRUCCIONES:
1. Analiza cada producto seg√∫n la consulta del cliente
2. Recomienda los {count} mejores productos
3. Explica por qu√© cada uno es ideal para el cliente
4. Considera precio, calidad, especificaciones y caso de uso
5. Usa un tono entusiasta pero profesional
6. Incluye emojis moderadamente
7. M√°ximo 250 palabras

Formato de respuesta:
üéØ **Mis {count} recomendaciones principales para ti:**

1. **[Nombre producto]** (S/ [precio])
   ‚ú® [Explicaci√≥n breve por qu√© es ideal]

[Continuar con otros productos]

üí° **¬øPor qu√© estas opciones?** [Resumen breve]
"""
        
        return prompt

    def _fallback_recommendation_response(self, candidate_products: List[Dict[str, Any]], 
                                        user_query: str, count: int) -> str:
        """Respuesta de respaldo para recomendaciones"""
        response = f"üéØ **Aqu√≠ tienes {min(count, len(candidate_products))} opciones para '{user_query}':**\n\n"
        
        for i, prod in enumerate(candidate_products[:count]):
            response += f"{i+1}. **{prod.get('name', 'Producto')}** (S/ {prod.get('price', 'Consultar')})\n"
            if prod.get('description'):
                response += f"   üí° {prod.get('description', '')[:80]}...\n"
            response += "\n"
        
        response += "üí¨ Para una recomendaci√≥n m√°s personalizada, ¬°consultemos juntos tus necesidades espec√≠ficas!"
        return response

    def answer_tech_question(self, question: str, context: str = "") -> str:
        """
        Responde preguntas generales sobre tecnolog√≠a usando IA.
        """
        logger.info(f"Consulta tecnol√≥gica: {question[:50]}...")
        
        if not self.model:
            return self._fallback_tech_response(question)
        
        try:
            prompt = self._build_tech_question_prompt(question, context)
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error en consulta tecnol√≥gica: {e}")
            return self._fallback_tech_response(question)

    def _build_tech_question_prompt(self, question: str, context: str) -> str:
        """Construir prompt para consultas tecnol√≥gicas"""
        
        prompt = f"""
Eres InfoBot, el asistente especializado en tecnolog√≠a de GRUPO INFOTEC, empresa l√≠der en Per√∫.

CONSULTA DEL CLIENTE: "{question}"

CONTEXTO ADICIONAL: {context if context else "Ninguno"}

CONOCIMIENTO BASE:
- Eres experto en laptops, PCs, componentes, hardware y software
- Tienes conocimiento actualizado sobre marcas como HP, Dell, Asus, Lenovo, Acer, MSI
- Conoces sobre procesadores Intel, AMD, tarjetas gr√°ficas NVIDIA, AMD
- Sabes sobre tendencias tecnol√≥gicas, gaming, productividad, desarrollo

INSTRUCCIONES:
1. Responde de manera clara y educativa
2. Usa un tono amigable pero profesional
3. Incluye ejemplos pr√°cticos cuando sea relevante
4. Si la pregunta requiere productos espec√≠ficos, menciona que puedes ayudar a buscarlos
5. M√°ximo 200 palabras
6. Incluye emojis moderadamente
7. Termina invitando a seguir la conversaci√≥n

IMPORTANTE: No inventes especificaciones exactas de productos. Si necesitas datos espec√≠ficos, sugiere buscar productos en nuestra tienda.

Responde como InfoBot de GRUPO INFOTEC:
"""
        
        return prompt

    def _fallback_tech_response(self, question: str) -> str:
        """Respuesta de respaldo para consultas tecnol√≥gicas"""
        return f"""üí° **Sobre tu consulta tecnol√≥gica:**

Gracias por tu pregunta sobre tecnolog√≠a. Aunque tengo algunas limitaciones t√©cnicas en este momento, puedo ayudarte de estas maneras:

üîç **Lo que puedo hacer:**
‚Ä¢ Buscar productos espec√≠ficos en nuestro cat√°logo
‚Ä¢ Mostrar especificaciones detalladas de equipos
‚Ä¢ Ayudarte a comparar opciones disponibles
‚Ä¢ Conectarte con nuestros especialistas

üí¨ **Mi sugerencia:**
¬øPodr√≠as reformular tu pregunta especificando qu√© tipo de producto o informaci√≥n buscas? Por ejemplo:
‚Ä¢ "Busco una laptop para gaming"
‚Ä¢ "Quiero comparar procesadores Intel vs AMD"
‚Ä¢ "Necesito una PC para dise√±o gr√°fico"

¬°Estoy aqu√≠ para ayudarte a encontrar la mejor soluci√≥n tecnol√≥gica! üòä"""