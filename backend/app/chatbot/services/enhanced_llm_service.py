'''
Servicio mejorado para interactuar con Gemini AI.
Maneja comparaciones de productos, consultas tecnol√≥gicas y recomendaciones avanzadas.
'''
import logging
from typing import List, Dict, Any, Optional
import google.generativeai as genai

logger = logging.getLogger(__name__)

class EnhancedLLMService:
    """
    Servicio mejorado para interactuar con Gemini AI.
    Maneja comparaciones de productos y consultas tecnol√≥gicas avanzadas.
    """
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        if not api_key:
            logger.warning("EnhancedLLMService inicializado sin API key. Funcionalidad limitada.")
            self.model = None
        else:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                logger.info("EnhancedLLMService inicializado correctamente con Gemini AI")
            except Exception as e:
                logger.error(f"Error inicializando Gemini AI: {e}")
                self.model = None

    def generate_comparison_response(
        self,
        item1_name: str,
        item2_name: str,
        attributes: List[str],
        item1_data: Optional[Dict[str, Any]] = None,
        item2_data: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Genera una comparaci√≥n detallada usando Gemini AI.
        """
        logger.info(f"LLM Comparaci√≥n: '{item1_name}' vs '{item2_name}' en atributos: {attributes}")
        
        if not self.model:
            return self._fallback_comparison_response(item1_name, item2_name, attributes)
        
        try:
            prompt = self._build_comparison_prompt(item1_name, item2_name, attributes, item1_data, item2_data)
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error en comparaci√≥n LLM: {e}")
            return self._fallback_comparison_response(item1_name, item2_name, attributes)
    
    def _build_comparison_prompt(self, item1_name: str, item2_name: str, attributes: List[str], 
                                item1_data: Optional[Dict[str, Any]], item2_data: Optional[Dict[str, Any]]) -> str:
        """Construir prompt especializado para comparaci√≥n de productos tecnol√≥gicos"""
        
        prompt = f"""
Eres un experto consultor en tecnolog√≠a de GRUPO INFOTEC, empresa l√≠der en equipos tecnol√≥gicos en Per√∫.

TAREA: Compara detalladamente '{item1_name}' con '{item2_name}' para ayudar a un cliente a tomar la mejor decisi√≥n.

ASPECTOS A COMPARAR:
{', '.join(attributes) if attributes and 'caracteristicas' not in attributes else 'Todas las caracter√≠sticas relevantes'}

INFORMACI√ìN DISPONIBLE:
"""
        
        if item1_data:
            prompt += f"\nüìä DATOS DE {item1_name.upper()}:\n"
            for key, value in item1_data.items():
                if value and value != "N/A":
                    prompt += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        if item2_data:
            prompt += f"\nüìä DATOS DE {item2_name.upper()}:\n"
            for key, value in item2_data.items():
                if value and value != "N/A":
                    prompt += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        prompt += f"""

INSTRUCCIONES:
1. Proporciona una comparaci√≥n clara y estructurada
2. Destaca las ventajas y desventajas de cada producto
3. Considera factores como rendimiento, precio, calidad-precio
4. Usa un tono profesional pero amigable
5. Incluye emojis moderadamente para mejor legibilidad
6. Termina con una recomendaci√≥n seg√∫n diferentes tipos de usuario
7. M√°ximo 300 palabras
8. Si falta informaci√≥n espec√≠fica, basa la comparaci√≥n en conocimiento general de estos productos

Formato de respuesta:
üîç **Comparaci√≥n: {item1_name} vs {item2_name}**

[Comparaci√≥n detallada aqu√≠]

üí° **Recomendaci√≥n:**
[Sugerencia seg√∫n tipo de usuario]
"""
        
        return prompt
    
    def _fallback_comparison_response(self, item1_name: str, item2_name: str, attributes: List[str]) -> str:
        """Respuesta de respaldo cuando no est√° disponible el LLM"""
        return f"""üîç **Comparaci√≥n: {item1_name} vs {item2_name}**

Lo siento, en este momento tengo limitaciones para realizar una comparaci√≥n detallada con IA. 

üìã **Lo que puedo hacer:**
‚Ä¢ Buscar especificaciones individuales de cada producto
‚Ä¢ Mostrar precios y disponibilidad actual
‚Ä¢ Conectarte con un asesor especializado

üí° **Te sugiero:**
1. Consultar las especificaciones de cada producto por separado
2. Contactar a nuestro equipo de ventas para una asesor√≠a personalizada
3. Visitar nuestra tienda para ver los productos en persona

¬øTe gustar√≠a que busque informaci√≥n espec√≠fica de alguno de estos productos?"""

    def recommend_top_products(
        self,
        candidate_products: List[Dict[str, Any]],
        user_query: str,
        category: Optional[str] = None,
        use_case: Optional[str] = None,
        count: int = 3
    ) -> str:
        """
        Genera recomendaciones inteligentes de productos usando IA
        """
        logger.info(f"Generando recomendaciones IA para {len(candidate_products)} productos")
        
        if not self.model:
            return self._fallback_recommendation_response(candidate_products, user_query, count)
        
        try:
            prompt = self._build_recommendation_prompt(
                candidate_products, user_query, category, use_case, count
            )
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error generando recomendaciones con IA: {e}")
            return self._fallback_recommendation_response(candidate_products, user_query, count)

    def _build_recommendation_prompt(
        self,
        products: List[Dict[str, Any]],
        user_query: str,
        category: Optional[str],
        use_case: Optional[str],
        count: int
    ) -> str:
        """Construir prompt para recomendaciones"""
        
        # Formatear productos para el prompt
        products_text = ""
        for i, product in enumerate(products[:50], 1):  # M√°ximo 50 productos para an√°lisis
            specs_text = ""
            if product.get("specifications"):
                specs = product["specifications"]
                if isinstance(specs, dict):
                    specs_text = ", ".join([f"{k}: {v}" for k, v in specs.items() if v])
                else:
                    specs_text = str(specs)
            
            products_text += f"""
{i}. {product.get('name', 'N/A')}
   - Precio: S/ {product.get('price', 0)}
   - Marca: {product.get('brand', 'N/A')}
   - Rating: {product.get('rating', 'N/A')}/5
   - Stock: {product.get('stock_quantity', 0)}
   - Descripci√≥n: {product.get('description', 'N/A')}
   - Especificaciones: {specs_text or 'N/A'}
"""

        context_info = ""
        if category:
            context_info += f"Categor√≠a solicitada: {category}\n"
        if use_case:
            context_info += f"Caso de uso: {use_case}\n"

        return f"""Eres InfoBot de GRUPO INFOTEC, especialista en tecnolog√≠a. Analiza estos {len(products)} productos y recomienda los {count} mejores para la consulta del usuario.

CONSULTA DEL USUARIO: "{user_query}"
{context_info}

PRODUCTOS DISPONIBLES:
{products_text}

INSTRUCCIONES:
1. Analiza TODOS los productos considerando: precio, especificaciones, rating, stock, relaci√≥n calidad-precio
2. Selecciona los {count} mejores productos que respondan mejor a la consulta
3. Ord√©nalos del mejor al menos recomendado
4. Para cada recomendaci√≥n incluye:
   - Nombre del producto exacto
   - Precio
   - 2-3 razones principales por las que lo recomiendas
   - Un beneficio clave espec√≠fico

FORMATO DE RESPUESTA (m√°ximo 150 palabras):
üéØ **Mis {count} mejores recomendaciones:**

**1. [Nombre exacto]** (S/ [precio])
‚ú® [Raz√≥n principal] - [Beneficio espec√≠fico]

**2. [Nombre exacto]** (S/ [precio])  
‚ú® [Raz√≥n principal] - [Beneficio espec√≠fico]

**3. [Nombre exacto]** (S/ [precio])
‚ú® [Raz√≥n principal] - [Beneficio espec√≠fico]

üí° ¬øTe interesa alguna? ¬°Puedo darte m√°s detalles! üòä

IMPORTANTE: 
- Solo recomienda productos de la lista proporcionada
- Usa los nombres exactos de los productos
- S√© conciso pero informativo
- Responde como InfoBot de GRUPO INFOTEC
"""

    def _fallback_recommendation_response(
        self,
        products: List[Dict[str, Any]],
        user_query: str,
        count: int
    ) -> str:
        """Respuesta de respaldo para recomendaciones"""
        # Ordenar productos por rating y precio para dar mejores primero
        sorted_products = sorted(
            products, 
            key=lambda x: (x.get('rating', 0) or 0, -(x.get('price', 0) or 0)), 
            reverse=True
        )
        
        response = f"üéØ **Mis {count} mejores recomendaciones:**\n\n"
        
        for i, product in enumerate(sorted_products[:count], 1):
            name = product.get('name', 'Producto')
            price = product.get('price', 0)
            brand = product.get('brand', '')
            rating = product.get('rating', 0)
            
            brand_text = f" de {brand}" if brand else ""
            rating_text = f" - Rating {rating}/5" if rating else ""
            
            response += f"**{i}. {name}** (S/ {price})\n"
            response += f"‚ú® Excelente opci√≥n{brand_text}{rating_text}\n\n"
        
        response += "üí° ¬øTe interesa alguna? ¬°Puedo darte m√°s detalles! üòä"
        return response

    def answer_tech_question(self, question: str, context: str = "") -> str:
        """
        Responde preguntas generales sobre tecnolog√≠a usando IA.
        """
        logger.info(f"Consulta tecnol√≥gica: {question[:50]}...")
        
        if not self.model:
            return self._fallback_tech_response(question)
        
        try:
            prompt = self._build_tech_question_prompt(question, context)
            response = self.model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"Error en consulta tecnol√≥gica: {e}")
            return self._fallback_tech_response(question)

    def _build_tech_question_prompt(self, question: str, context: str) -> str:
        """Construir prompt para consultas tecnol√≥gicas"""
        
        prompt = f"""
Eres InfoBot, el asistente especializado en tecnolog√≠a de GRUPO INFOTEC, empresa l√≠der en Per√∫.

CONSULTA DEL CLIENTE: "{question}"

CONTEXTO ADICIONAL: {context if context else "Ninguno"}

CONOCIMIENTO BASE:
- Eres experto en laptops, PCs, componentes, hardware y software
- Tienes conocimiento actualizado sobre marcas como HP, Dell, Asus, Lenovo, Acer, MSI
- Conoces sobre procesadores Intel, AMD, tarjetas gr√°ficas NVIDIA, AMD
- Sabes sobre tendencias tecnol√≥gicas, gaming, productividad, desarrollo

INSTRUCCIONES:
1. Responde de manera clara y educativa
2. Usa un tono amigable pero profesional
3. Incluye ejemplos pr√°cticos cuando sea relevante
4. Si la pregunta requiere productos espec√≠ficos, menciona que puedes ayudar a buscarlos
5. M√°ximo 200 palabras
6. Incluye emojis moderadamente
7. Termina invitando a seguir la conversaci√≥n

IMPORTANTE: No inventes especificaciones exactas de productos. Si necesitas datos espec√≠ficos, sugiere buscar productos en nuestra tienda.

Responde como InfoBot de GRUPO INFOTEC:
"""
        
        return prompt

    def _fallback_tech_response(self, question: str) -> str:
        """Respuesta de respaldo para consultas tecnol√≥gicas"""
        return f"""üí° **Sobre tu consulta tecnol√≥gica:**

Gracias por tu pregunta sobre tecnolog√≠a. Aunque tengo algunas limitaciones t√©cnicas en este momento, puedo ayudarte de estas maneras:

üîç **Lo que puedo hacer:**
‚Ä¢ Buscar productos espec√≠ficos en nuestro cat√°logo
‚Ä¢ Mostrar especificaciones detalladas de equipos
‚Ä¢ Ayudarte a comparar opciones disponibles
‚Ä¢ Conectarte con nuestros especialistas

üí¨ **Mi sugerencia:**
¬øPodr√≠as reformular tu pregunta especificando qu√© tipo de producto o informaci√≥n buscas? Por ejemplo:
‚Ä¢ "Busco una laptop para gaming"
‚Ä¢ "Quiero comparar procesadores Intel vs AMD"
‚Ä¢ "Necesito una PC para dise√±o gr√°fico"

¬°Estoy aqu√≠ para ayudarte a encontrar la mejor soluci√≥n tecnol√≥gica! üòä"""